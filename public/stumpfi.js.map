{"version":3,"sources":["webpack://stumpfi/webpack/bootstrap","webpack://stumpfi/./entities/Entity.ts","webpack://stumpfi/./entities/ResourceContainer.ts","webpack://stumpfi/./entities/Template.ts","webpack://stumpfi/./entities/Resource.ts","webpack://stumpfi/./entities/Page.ts","webpack://stumpfi/./entities/Document.ts","webpack://stumpfi/./entities/Content.ts","webpack://stumpfi/external \"crypto\"","webpack://stumpfi/./entities/Component.ts","webpack://stumpfi/./main.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","r","value","n","__esModule","default","object","property","prototype","hasOwnProperty","p","w","s","crypto","[object Object]","this","id","randomBytes","toString","test","Error","Entity_1","super","resources","resource","includes","push","index","indexOf","splice","ResourceContainer_1","code","Resource","type","content","attributes","duplicatedResource","keys","forEach","attribute","setAttribute","setContent","Page","master","components","currentMaster","getId","getMaster","includeMaster","getResources","concat","component","getComponents","componentsText","map","getText","join","trim","duplicatedPage","addComponent","duplicate","addResource","setMaster","Document","description","checkName","tags","authors","pages","tag","author","page","text","Content","markupText","require","Template_1","Component","template","dimensions","coordinates","contents","h","x","y","filter","duplicatedComponent","setCoordinates","assign","setDimensions","setTemplate","setContentAt","Component_1","Content_1","Document_1","Page_1","Resource_1","Template"],"mappings":"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","file":"stumpfi.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// object to store loaded and loading wasm modules\n \tvar installedWasmModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// object with all compiled WebAssembly.Modules\n \t__webpack_require__.w = {};\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 9);\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport * as crypto from 'crypto';\n\n\n/**\n * Represents an abstract stumpfi entity.\n */\nexport default abstract class Entity {\n\n  /** Entity's id. */\n  protected id : string;\n\n\n  /**\n   * Class constructor.\n   * @returns {void}\n   */\n  public constructor() {\n    this.id = crypto.randomBytes(20).toString('hex');\n  }\n\n\n  /**\n   * id setter.\n   * @param {string} id New id to set to the entity.\n   * @throws {Error} Throws an error if the id is not in a valid format.\n   * @returns {void}\n   */\n  public setId(id : string) : void {\n    if (!/^[a-z0-9]{40}$/.test(id)) {\n      throw new Error('Invalid id format.');\n    }\n    this.id = id;\n  }\n\n\n  /**\n   * id getter.\n   * @returns {string} The entity's id.\n   */\n  public getId() : string {\n    return this.id;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport Entity from './Entity';\nimport Resource from './Resource';\n\n\n/**\n * Represents a container of Resource instances.\n */\nexport default abstract class ResourceContainer extends Entity {\n\n  /** Container's external resources list. */\n  protected resources : Resource[];\n\n\n  /**\n   * Class constructor.\n   * @returns {void}\n   */\n  public constructor() {\n    super();\n    this.resources = [];\n  }\n\n\n  /**\n   * Adds a new external resource to the container.\n   * @param {Resource} resource Resource to add to the container.\n   * @returns {void}\n   */\n  public addResource(resource : Resource) : void {\n    if (!this.resources.includes(resource)) this.resources.push(resource);\n  }\n\n\n  /**\n   * Removes an external resource from the container if exists.\n   * @param {Resource} resource Resource to remove from the container.\n   * @returns {void}\n   */\n  public removeResource(resource : Resource) : void {\n    const index : number = this.resources.indexOf(resource);\n    if (index > -1) this.resources.splice(index, 1);\n  }\n\n\n  /**\n   * resources getter.\n   * @returns {Resource[]} The page's resources.\n   */\n  public getResources() : Resource[] {\n    return this.resources;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport ResourceContainer from './ResourceContainer';\n\n\n/**\n * Represents a component's template.\n */\nexport default class Template extends ResourceContainer {\n\n  /** Template's HTML code. */\n  private code : string;\n\n\n  /**\n   * Class constructor.\n   * @param {string} code Template's HTML code.\n   * @returns {void}\n   */\n  public constructor(code : string) {\n    super();\n    this.code = code;\n  }\n\n\n  /**\n   * code getter.\n   * @returns {string} The template's HTML code.\n   */\n  public getCode() : string {\n    return this.code;\n  }\n\n\n  /**\n   * code setter.\n   * @param {string} code HTML code to set to the template.\n   * @returns {void}\n   */\n  public setCode(code : string) : void {\n    this.code = code;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport { Attributes } from '../types';\nimport Entity from './Entity';\n\n\n/**\n * Represents an external resource.\n */\nexport default class Resource extends Entity {\n\n  /** Resource HTML type (script, style, link). */\n  private type : 'script' | 'style' | 'link';\n\n  /** Resource content. */\n  private content : string | null;\n\n  /** Resource HTML attributes, depend on its type. */\n  private attributes : Attributes;\n\n\n  /**\n   * Class constructor.\n   * @param {\\'script\\' | \\'style\\' | \\'link\\'} type Resource HTML type (script, style, link).\n   * @returns {void}\n   */\n  public constructor(type : 'script' | 'style' | 'link') {\n    super();\n    this.type = type;\n    this.content = null;\n    this.attributes = {};\n  }\n\n\n  /**\n   * type getter.\n   * @returns {\\'script\\' | \\'style\\' | \\'link\\'} The resource HTML type.\n   */\n  public getType() : 'script' | 'style' | 'link' {\n    return this.type;\n  }\n\n\n  /**\n   * content getter.\n   * @returns {string} The resource content.\n   */\n  public getContent() : string | null {\n    return this.content;\n  }\n\n\n  /**\n   * content setter.\n   * @param {string} content New content to set to the resource.\n   * @returns {void}.\n   */\n  public setContent(content : string) : void {\n    this.content = content;\n  }\n\n\n  /**\n   * attributes getter.\n   * @returns {Attributes} The resource attributes.\n   */\n  public getAttributes() : Attributes {\n    return this.attributes;\n  }\n\n\n  /**\n   * Sets an HTML attribute to the resource.\n   * @param {string} name Attribute name.\n   * @param {string | boolean} value Attribute value.\n   * @returns {void}.\n   */\n  public setAttribute(name : string, value : string | boolean) : void {\n    this.attributes[name] = value;\n  }\n\n\n  /**\n   * Deeply duplicates the resource. Returns a new Resource instance.\n   * @returns {Resource} The duplicated resource.\n   */\n  public duplicate() : Resource {\n    const duplicatedResource : Resource = new Resource(this.type);\n    Object.keys(this.attributes).forEach((attribute) => {\n      duplicatedResource.setAttribute(attribute, this.attributes[attribute]);\n    });\n    if (this.content !== null) {\n      duplicatedResource.setContent(this.content);\n    }\n    return duplicatedResource;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport Component from './Component';\nimport Resource from './Resource';\nimport ResourceContainer from './ResourceContainer';\n\n\n/**\n * Represents a document page.\n */\nexport default class Page extends ResourceContainer {\n\n  /** Page master. */\n  private master : Page | null;\n\n  /** Page's components list. */\n  private components : Component[];\n\n\n  /**\n   * Class constructor.\n   * @param {Page} [master] Page master.\n   * @returns {void}\n   */\n  public constructor(master? : Page) {\n    super();\n    // We don't check cyclic dependencies between page masters here since it cannot happen.\n    this.master = master || null;\n    this.components = [];\n  }\n\n\n  /**\n   * master setter.\n   * @param {Page} master Master to set to the page.\n   * @throws {Error} Throws an error if setting this page master creates cyclic dependencies.\n   * @returns {void}\n   */\n  public setMaster(master : Page) : void {\n    // We first ensure that the current page instance is not contained in the masters tree\n    // of `master` (which would lead to cyclic dependencies that would blow up page rendering).\n    let currentMaster : Page | null = master;\n    while (currentMaster !== null && currentMaster.getId() !== this.id) {\n      currentMaster = currentMaster.getMaster();\n    }\n    if (currentMaster !== null) {\n      throw new Error('Cyclic dependencies between page masters is not allowed.');\n    }\n    this.master = master;\n  }\n\n\n  /**\n   * master getter.\n   * @returns {Page | null} The page master.\n   */\n  public getMaster() : Page | null {\n    return this.master;\n  }\n\n\n  /**\n   * resources getter.\n   * @param {boolean} [includeMaster] Whether to include page master's resources (default to true).\n   * @returns {Resource[]} The page's resources.\n   */\n  public getResources(includeMaster : boolean = true) : Resource[] {\n    return (includeMaster && this.master !== null)\n      ? this.master.getResources(includeMaster).concat(this.resources)\n      : this.resources;\n  }\n\n\n  /**\n   * Adds a new component to the page if it doesn't already exist.\n   * @param {Component} component Component to add to the page.\n   * @returns {void}\n   */\n  public addComponent(component : Component) : void {\n    if (!this.components.includes(component)) this.components.push(component);\n  }\n\n\n  /**\n   * Removes a component from the page if exists.\n   * @param {Component} component Component to remove from the page.\n   * @returns {void}\n   */\n  public removeComponent(component : Component) : void {\n    const index : number = this.components.indexOf(component);\n    if (index > -1) this.components.splice(index, 1);\n  }\n\n\n  /**\n   * components getter.\n   * @param {boolean} [includeMaster] Whether to include page master's components (default to true).\n   * @returns {Component[]} The page's components list.\n   */\n  public getComponents(includeMaster : boolean = true) : Component[] {\n    return (includeMaster && this.master !== null)\n      ? this.master.getComponents(includeMaster).concat(this.components)\n      : this.components;\n  }\n\n\n  /**\n   * Retrieves all the text contained in the page.\n   * @param {boolean} [includeMaster] Whether to include page master's text (default to true).\n   * @returns {string} The page's text.\n   */\n  public getText(includeMaster : boolean = true) : string {\n    const componentsText : string = this.components.map(component => component.getText()).join(' ');\n    return (includeMaster && this.master !== null)\n      ? `${this.master.getText(includeMaster)} ${componentsText}`.trim()\n      : componentsText.trim();\n  }\n\n\n  /**\n   * Deeply duplicates the page. Returns a new Page instance.\n   * Caveat : page master is not duplicated.\n   * @returns {Page} The duplicated page.\n   */\n  public duplicate() : Page {\n    const duplicatedPage : Page = new Page();\n    this.components.forEach((component) => { duplicatedPage.addComponent(component.duplicate()); });\n    this.resources.forEach((resource) => { duplicatedPage.addResource(resource.duplicate()); });\n    if (this.master !== null) { duplicatedPage.setMaster(this.master); }\n    return duplicatedPage;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport Page from './Page';\nimport ResourceContainer from './ResourceContainer';\n\n\n/**\n * Represents a document.\n */\nexport default class Document extends ResourceContainer {\n\n  /** Document's name. */\n  private name : string;\n\n  /** Document's description. */\n  private description : string;\n\n  /** Document's tags. */\n  private tags : string[];\n\n  /** Document's authors. */\n  private authors : string[];\n\n  /** Document's pages list. */\n  private pages : Page[];\n\n\n  /**\n   * Checks if the given document's name is valid, throws an error otherwise.\n   * @param {string} name Name to check.\n   * @returns {void}\n   */\n  private static checkName(name : string) : void {\n    if (/[\\/\\\\\\?\\:<>\\*\\\"\\|]/ig.test(name)) {\n      throw new Error('Document\\'s name cannot contain the following characters : /\\\\?:<>*\"|');\n    }\n  }\n\n\n  /**\n   * Class constructor.\n   * @param {string} [name] Document's name.\n   * @param {string} [description] Document's description.\n   * @returns {void}\n   */\n  public constructor(name : string = 'new document', description : string = '') {\n    super();\n    Document.checkName(name);\n    this.name = name;\n    this.description = description;\n    this.tags = [];\n    this.authors = [];\n    this.pages = [];\n    this.resources = [];\n  }\n\n\n  /**\n   * name setter.\n   * @param {string} name Name to set to the document.\n   * @returns {void}\n   */\n  public setName(name : string) : void {\n    Document.checkName(name);\n    this.name = name;\n  }\n\n\n  /**\n   * name getter.\n   * @returns {string} The document's name.\n   */\n  public getName() : string {\n    return this.name;\n  }\n\n\n  /**\n   * description setter.\n   * @param {string} description Description to set to the document.\n   * @returns {void}\n   */\n  public setDescription(description : string) : void {\n    this.description = description;\n  }\n\n\n  /**\n   * description getter.\n   * @returns {string} The document's description.\n   */\n  public getDescription() : string {\n    return this.description;\n  }\n\n\n  /**\n   * Adds a new tag to the document.\n   * @param {string} tag Tag to add to the document.\n   * @returns {void}\n   */\n  public addTag(tag : string) : void {\n    if (!this.tags.includes(tag)) this.tags.push(tag);\n  }\n\n\n  /**\n   * Removes a tag from the document.\n   * @param {string} tag Tag to remove from the document.\n   * @returns {void}\n   */\n  public removeTag(tag : string) : void {\n    const index : number = this.tags.indexOf(tag);\n    if (index > -1) this.tags.splice(index, 1);\n  }\n\n\n  /**\n   * tags getter.\n   * @returns {string[]} The document's tags.\n   */\n  public getTags() : string[] {\n    return this.tags;\n  }\n\n\n  /**\n   * Adds a new author to the document.\n   * @param {string} author Author to add to the document.\n   * @returns {void}\n   */\n  public addAuthor(author : string) : void {\n    if (!this.authors.includes(author)) this.authors.push(author);\n  }\n\n\n  /**\n   * Removes an author from the document.\n   * @param {string} author Author to remove from the document.\n   * @returns {void}\n   */\n  public removeAuthor(author : string) : void {\n    const index : number = this.authors.indexOf(author);\n    if (index > -1) this.authors.splice(index, 1);\n  }\n\n\n  /**\n   * authors getter.\n   * @returns {string[]} The document's authors.\n   */\n  public getAuthors() : string[] {\n    return this.authors;\n  }\n\n\n  /**\n   * pages getter.\n   * @returns {Page[]} The document's pages list.\n   */\n  public getPages() : Page[] {\n    return this.pages;\n  }\n\n\n  /**\n   * Adds a new page to the document.\n   * @param {Page} page Page to add to the document.\n   * @returns {void}\n   */\n  public addPage(page : Page) : void {\n    this.pages.push(page);\n  }\n\n\n  /**\n   * Retrieves all the text contained in the document.\n   * @returns {string} The document's text.\n   */\n  public getText() : string {\n    let text : string = this.name;\n    text = `${text} ${this.description}`;\n    text = `${text} ${this.tags.join(' ')}`.trim();\n    text = `${text} ${this.authors.join(' ')}`.trim();\n    text = `${text} ${this.pages.map(page => page.getText()).join('\\n\\n')}`;\n    return text;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport { ContentTypes } from '../types';\nimport Entity from './Entity';\n\n\n/**\n * Represents a component's content.\n */\nexport default class Content extends Entity {\n\n  /** Content's type (media, rich text, simple text). */\n  private type : ContentTypes;\n\n  /** Content's markup text. */\n  private markupText : string;\n\n\n  /**\n   * Class constructor.\n   * @param {ContentTypes} type Content's type.\n   * @param {string} [markupText] Content's markup text.\n   * @returns {void}\n   */\n  public constructor(type : ContentTypes, markupText : string = '') {\n    super();\n    this.type = type;\n    this.markupText = markupText;\n  }\n\n\n  /**\n   * type getter.\n   * @returns {ContentTypes} The content's type.\n   */\n  public getType() : ContentTypes {\n    return this.type;\n  }\n\n\n  /**\n   * type setter.\n   * @param {ContentTypes} type Type to set to the content.\n   * @returns {void}\n   */\n  public setType(type : ContentTypes) : void {\n    this.type = type;\n  }\n\n\n  /**\n   * markupText getter.\n   * @returns {string} The content's markup text.\n   */\n  public getMarkupText() : string {\n    return this.markupText;\n  }\n\n\n  /**\n   * markupText setter.\n   * @param {string} markupText Markup text to set to the content.\n   * @returns {void}\n   */\n  public setMarkupText(markupText : string) : void {\n    this.markupText = markupText;\n  }\n\n\n  /**\n   * Retrieves all the raw text contained in the content.\n   * @returns {string} The content's text.\n   */\n  public getText() : string {\n    return this.markupText;\n  }\n\n\n  /**\n   * Deeply duplicates the content. Returns a new Content instance.\n   * @returns {Content} The duplicated content.\n   */\n  public duplicate() : Content {\n    return new Content(this.type, this.markupText);\n  }\n\n}\n","module.exports = require(\"crypto\");","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport { Coordinates, Dimensions } from '../types';\nimport Content from './Content';\nimport Entity from './Entity';\nimport Template from './Template';\n\n\n/**\n * Represents a page component.\n */\nexport default class Component extends Entity {\n\n  /** Component's contents list. */\n  private contents : (Content | null)[];\n\n  /** Component's coordinates on the page. */\n  private coordinates : Coordinates;\n\n  /** Component's dimensions. */\n  private dimensions : Dimensions;\n\n  /** Component's template. */\n  private template : Template;\n\n\n  /**\n   * Class constructor.\n   * @param {Template} [template] Template to apply to contents.\n   * @param {Dimensions} [dimensions] Component's dimensions.\n   * @param {Coordinates} [coordinates] Component's coordinates.\n   * @returns {void}\n   */\n  public constructor(template? : Template, dimensions? : Dimensions, coordinates? : Coordinates) {\n    super();\n    this.contents = [];\n    this.dimensions = dimensions || { w: 0, h: 0 };\n    this.coordinates = coordinates || { x: 0, y: 0 };\n    this.template = template || new Template('{{RICH_TEXT}}');\n  }\n\n\n  /**\n   * contents getter.\n   * @returns {(Content | null)[]} The component's contents list.\n   */\n  public getContents() : (Content | null)[] {\n    return this.contents;\n  }\n\n\n  /**\n   * Sets a content at the given index in the component's contents list.\n   * @param {number} index Index of the content in the list.\n   * @param {Content} content Content to set at the given indice in the list.\n   * @returns {void}\n   */\n  public setContentAt(index : number, content : Content) : void {\n    for (let i : number = 0; i < index; ++i) {\n      this.contents[i] = this.contents[i] || null;\n    }\n    this.contents[index] = content;\n  }\n\n\n  /**\n   * coordinates getter.\n   * @returns {Coordinates} The component's coordinates.\n   */\n  public getCoordinates() : Coordinates {\n    return this.coordinates;\n  }\n\n\n  /**\n   * coordinates setter.\n   * @param {string} coordinates Coordinates to set to the component.\n   * @returns {void}\n   */\n  public setCoordinates(coordinates : Coordinates) : void {\n    this.coordinates = coordinates;\n  }\n\n\n  /**\n   * dimensions getter.\n   * @returns {Dimensions} The component's dimensions.\n   */\n  public getDimensions() : Dimensions {\n    return this.dimensions;\n  }\n\n\n  /**\n   * dimensions setter.\n   * @param {Dimensions} dimensions Dimensions to set to the component.\n   * @returns {void}\n   */\n  public setDimensions(dimensions : Dimensions) : void {\n    this.dimensions = dimensions;\n  }\n\n\n  /**\n   * template getter.\n   * @returns {Template} The component's template.\n   */\n  public getTemplate() : Template {\n    return this.template;\n  }\n\n\n  /**\n   * template setter.\n   * @param {Template} template Template to set to the component.\n   * @returns {void}\n   */\n  public setTemplate(template : Template) : void {\n    this.template = template;\n  }\n\n\n  /**\n   * Retrieves all the text contained in the component.\n   * @returns {string} The component's text.\n   */\n  public getText() : string {\n    const contents : Content[] = this.contents.filter(content => content !== null) as Content[];\n    return contents.map(content => (content as Content).getText()).join(' ');\n  }\n\n\n  /**\n   * Deeply duplicates the component. Returns a new Component instance.\n   * Caveat : The component's contents and template are not duplicated.\n   * @returns {Component} The duplicated component.\n   */\n  public duplicate() : Component {\n    const duplicatedComponent : Component = new Component();\n    duplicatedComponent.setCoordinates({ ...this.coordinates });\n    duplicatedComponent.setDimensions({ ...this.dimensions });\n    duplicatedComponent.setTemplate(this.template);\n    this.contents.forEach((content, index) => {\n      if (content !== null) {\n        duplicatedComponent.setContentAt(index, content);\n      }\n    });\n    return duplicatedComponent;\n  }\n\n}\n","/**\n * Copyright 2016 - present, Matthieu Jabbour <matthieu.jabbour@gmail.com>.\n * All rights reserved.\n */\n\n\nimport { ContentTypes } from './types';\nimport Component from './entities/Component';\nimport Content from './entities/Content';\nimport Document from './entities/Document';\nimport Page from './entities/Page';\nimport Resource from './entities/Resource';\nimport Template from './entities/Template';\n\n\nexport { Component, Content, ContentTypes, Document, Page, Resource, Template };\n"],"sourceRoot":""}